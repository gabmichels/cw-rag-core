name: Nightly Evaluation Report

on:
  schedule:
  # Run at 2 AM UTC daily
  - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if no changes'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8'

jobs:
  nightly-full-evaluation:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build packages
      run: pnpm -r build

    - name: Start evaluation infrastructure
      run: |
        # Start core services
        docker-compose -f docker-compose.eval.yml up -d qdrant redis

        # Wait for services to be ready
        echo "Waiting for Qdrant..."
        timeout 60 bash -c 'until curl -f http://localhost:6333/ >/dev/null 2>&1; do sleep 2; done'

        echo "Waiting for Redis..."
        timeout 30 bash -c 'until docker-compose -f docker-compose.eval.yml exec -T redis redis-cli ping >/dev/null 2>&1; do sleep 1; done'

        # Start API service
        docker-compose -f docker-compose.eval.yml up -d api

        echo "Waiting for API..."
        timeout 120 bash -c 'until curl -f http://localhost:3000/healthz >/dev/null 2>&1; do sleep 3; done'

        echo "‚úÖ All services ready"

    - name: Run comprehensive evaluation
      id: run-evaluation
      run: |
        cd packages/evals

        # Create timestamp for this run
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        OUTPUT_DIR="./nightly-results-${TIMESTAMP}"

        echo "üß™ Running nightly comprehensive evaluation..."
        echo "üìÅ Output directory: ${OUTPUT_DIR}"

        # Run full evaluation with all datasets
        npm run eval -- run \
          --dataset all \
          --api-url http://localhost:3000 \
          --output "${OUTPUT_DIR}" \
          --verbose \
          --parallel \
          --max-concurrency 5 \
          --timeout 45000 \
          --retries 3

        echo "OUTPUT_DIR=${OUTPUT_DIR}" >> $GITHUB_OUTPUT
        echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_OUTPUT

    - name: Generate enhanced reports
      run: |
        cd packages/evals
        OUTPUT_DIR="${{ steps.run-evaluation.outputs.OUTPUT_DIR }}"
        TIMESTAMP="${{ steps.run-evaluation.outputs.TIMESTAMP }}"

        # Create enhanced nightly report directory
        NIGHTLY_DIR="./nightly-reports"
        mkdir -p "${NIGHTLY_DIR}"

        if [[ -f "${OUTPUT_DIR}/evaluation-report.json" ]]; then
          # Copy standard reports
          cp "${OUTPUT_DIR}/evaluation-report.json" "${NIGHTLY_DIR}/nightly-${TIMESTAMP}.json"
          cp "${OUTPUT_DIR}/dashboard.html" "${NIGHTLY_DIR}/nightly-dashboard-${TIMESTAMP}.html"
          cp "${OUTPUT_DIR}/evaluation-report.md" "${NIGHTLY_DIR}/nightly-report-${TIMESTAMP}.md"

          # Create latest symlinks
          ln -sf "nightly-${TIMESTAMP}.json" "${NIGHTLY_DIR}/latest.json"
          ln -sf "nightly-dashboard-${TIMESTAMP}.html" "${NIGHTLY_DIR}/latest-dashboard.html"
          ln -sf "nightly-report-${TIMESTAMP}.md" "${NIGHTLY_DIR}/latest-report.md"

          # Generate trend analysis if previous reports exist
          if ls "${NIGHTLY_DIR}"/nightly-*.json 1> /dev/null 2>&1; then
            echo "üìà Generating trend analysis..."
            node -e "
              const fs = require('fs');
              const path = require('path');

              // Get all nightly reports from last 30 days
              const files = fs.readdirSync('${NIGHTLY_DIR}')
                .filter(f => f.startsWith('nightly-') && f.endsWith('.json'))
                .sort()
                .slice(-30);

              const trends = [];
              for (const file of files) {
                try {
                  const data = JSON.parse(fs.readFileSync(path.join('${NIGHTLY_DIR}', file), 'utf8'));
                  const date = file.match(/nightly-(\d{8}_\d{6})\.json/)?.[1];
                  if (date && data.metrics) {
                    trends.push({
                      date: date,
                      timestamp: data.timestamp,
                      recall5: data.metrics.gold?.recallAt5?.recall || 0,
                      idkPrecision: data.metrics.ood?.precision || 0,
                      bypassRate: data.metrics.injection?.bypassRate || 0,
                      leakRate: data.metrics.rbac?.leakRate || 0,
                      passRate: data.metrics.overall?.passRate || 0
                    });
                  }
                } catch (e) {
                  console.error('Error processing', file, e.message);
                }
              }

              fs.writeFileSync('${NIGHTLY_DIR}/trends.json', JSON.stringify({
                generated: new Date().toISOString(),
                period: '30_days',
                data: trends
              }, null, 2));

              console.log('‚úÖ Trend analysis generated with', trends.length, 'data points');
            "
          fi

          echo "üìä Reports generated in ${NIGHTLY_DIR}/"
          ls -la "${NIGHTLY_DIR}/"
        else
          echo "‚ùå No evaluation results found"
          exit 1
        fi

    - name: Validate nightly thresholds
      run: |
        cd packages/evals
        OUTPUT_DIR="${{ steps.run-evaluation.outputs.OUTPUT_DIR }}"

        # Run threshold validation
        node scripts/validate-ci-thresholds.js "${OUTPUT_DIR}/evaluation-report.json"

    - name: Upload nightly evaluation artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nightly-evaluation-${{ steps.run-evaluation.outputs.TIMESTAMP }}
        path: |
          packages/evals/nightly-results-${{ steps.run-evaluation.outputs.TIMESTAMP }}/
          packages/evals/nightly-reports/
        retention-days: 90

    - name: Commit trend data
      if: success()
      run: |
        cd packages/evals

        # Configure git
        git config --local user.email "nightly-eval@github.com"
        git config --local user.name "Nightly Evaluation"

        # Add trend data if it exists
        if [[ -f "nightly-reports/trends.json" ]]; then
          git add nightly-reports/
          git commit -m "üìä Add nightly evaluation results for $(date -u +%Y-%m-%d)" || echo "No changes to commit"
          git push origin HEAD:main || echo "Failed to push trend data"
        fi

    - name: Create GitHub release for monthly reports
      if: success() && github.event.schedule != null
      run: |
        # Create monthly release on first day of month
        if [[ $(date +%d) == "01" ]]; then
          MONTH=$(date -u +%Y-%m)
          gh release create "eval-report-${MONTH}" \
            packages/evals/nightly-reports/latest.json \
            packages/evals/nightly-reports/latest-dashboard.html \
            packages/evals/nightly-reports/trends.json \
            --title "üìä Monthly Evaluation Report - ${MONTH}" \
            --notes "Automated nightly evaluation report for ${MONTH}" \
            --prerelease || echo "Release creation failed or already exists"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup services
      if: always()
      run: |
        docker-compose -f docker-compose.eval.yml down --volumes --remove-orphans || true
        docker system prune -f || true
