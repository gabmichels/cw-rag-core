version: '3.8'

services:
  # Vector database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: eval-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - eval-network

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: eval-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - eval-network

  # API service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: eval-api
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: evaluation
      PORT: 3000
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis://redis:6379
      INGEST_TOKEN: eval-test-token-12345
      # Evaluation specific settings
      LOG_LEVEL: info
      API_TIMEOUT: 30000
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - eval-network
    volumes:
      - api_logs:/app/logs

  # Evaluation runner
  evaluator:
    build:
      context: .
      dockerfile: packages/evals/Dockerfile
    container_name: eval-runner
    environment:
      NODE_ENV: evaluation
      EVAL_API_URL: http://api:3000
      EVAL_TIMEOUT: 30000
      EVAL_RETRIES: 3
      EVAL_DATASET: ${EVAL_DATASET:-all}
      EVAL_PARALLEL: ${EVAL_PARALLEL:-true}
      EVAL_MAX_CONCURRENCY: ${EVAL_MAX_CONCURRENCY:-5}
      EVAL_VERBOSE: ${EVAL_VERBOSE:-true}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - eval-network
    volumes:
      - eval_results:/app/packages/evals/eval-results
      - ./packages/evals/data:/app/packages/evals/data:ro
    profiles:
      - evaluation
    command: >
      sh -c "
        echo 'Waiting for API to be fully ready...' &&
        sleep 10 &&
        echo 'Starting evaluation...' &&
        node dist/cli.js run
          --dataset $${EVAL_DATASET}
          --api-url $${EVAL_API_URL}
          --timeout $${EVAL_TIMEOUT}
          --retries $${EVAL_RETRIES}
          --output /app/packages/evals/eval-results
          $${EVAL_VERBOSE:+--verbose}
          $${EVAL_PARALLEL:+--parallel}
          --max-concurrency $${EVAL_MAX_CONCURRENCY}
      "

  # Data seeder (optional, for setting up test data)
  seeder:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: eval-seeder
    environment:
      NODE_ENV: evaluation
      QDRANT_URL: http://qdrant:6333
      INGEST_TOKEN: eval-test-token-12345
    depends_on:
      api:
        condition: service_healthy
    networks:
      - eval-network
    profiles:
      - seed
    volumes:
      - ./test-data:/app/test-data:ro
    command: >
      sh -c "
        echo 'Seeding test data...' &&
        # Add your data seeding commands here
        echo 'Data seeding completed'
      "

  # Monitoring and observability (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: eval-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - eval-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: eval-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: eval123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./ops/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - eval-network
    profiles:
      - monitoring

networks:
  eval-network:
    driver: bridge
    name: eval-network

volumes:
  qdrant_data:
    name: eval-qdrant-data
  redis_data:
    name: eval-redis-data
  eval_results:
    name: eval-results
  api_logs:
    name: eval-api-logs
  prometheus_data:
    name: eval-prometheus-data
  grafana_data:
    name: eval-grafana-data