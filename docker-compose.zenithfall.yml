# Zenithfall Tenant Configuration
# Generated from base template
name: ${PROJECT_PREFIX}-${TENANT}

services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ${QDRANT_CONTAINER_NAME}
    ports:
      - "${QDRANT_PORT}:6333"
      - "${QDRANT_GRPC_PORT}:6334"
    environment:
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/data
    volumes:
      - qdrant_storage:/qdrant/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 2 bash -c 'cat < /dev/null > /dev/tcp/localhost/6333' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  embeddings:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-1.8
    container_name: ${PROJECT_PREFIX}-${TENANT}-embeddings
    ports:
      - "${EMBEDDINGS_PORT}:80"
    environment:
      - MODEL_ID=BAAI/bge-small-en-v1.5
      - REVISION=main
      - MAX_CONCURRENT_REQUESTS=512
      - MAX_BATCH_TOKENS=65536
      - MAX_BATCH_REQUESTS=1024
      - MAX_CLIENT_BATCH_SIZE=32
      - VECTOR_DIM=${VECTOR_DIM}
    volumes:
      - embeddings_cache:/data
      - xenova-cache:/opt/cache
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://embeddings:80/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: ${API_CONTAINER_NAME}
    ports:
      - "${API_PORT}:3000"
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=${QDRANT_COLLECTION}
      - PORT=3000
      - CORS_ORIGIN=${CORS_ORIGIN}
      - TENANT=${TENANT}
      - VECTOR_DIM=${VECTOR_DIM}
      - PII_POLICY=${PII_POLICY}
      - EMBEDDINGS_PROVIDER=${EMBEDDINGS_PROVIDER}
      - EMBEDDINGS_MODEL=${EMBEDDINGS_MODEL}
      - EMBEDDINGS_URL=http://embeddings:80
      - INGEST_TOKEN=${INGEST_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_ENABLED=${LLM_ENABLED}
      - LLM_PROVIDER=${LLM_PROVIDER}
      - LLM_MODEL=${LLM_MODEL}
      - LLM_STREAMING=${LLM_STREAMING}
      - LLM_TIMEOUT_MS=${LLM_TIMEOUT_MS}
      - ANSWERABILITY_THRESHOLD=${ANSWERABILITY_THRESHOLD}
      - VECTOR_SEARCH_TIMEOUT_MS=${VECTOR_SEARCH_TIMEOUT_MS}
      - KEYWORD_SEARCH_TIMEOUT_MS=${KEYWORD_SEARCH_TIMEOUT_MS}
      - RERANKER_TIMEOUT_MS=${RERANKER_TIMEOUT_MS}
      - OVERALL_TIMEOUT_MS=${OVERALL_TIMEOUT_MS}
      - EMBEDDING_TIMEOUT_MS=${EMBEDDING_TIMEOUT_MS}
      - RATE_LIMIT_PER_IP=${RATE_LIMIT_PER_IP}
      - RATE_LIMIT_PER_USER=${RATE_LIMIT_PER_USER}
      - RATE_LIMIT_PER_TENANT=${RATE_LIMIT_PER_TENANT}
      - RATE_LIMIT_WINDOW_MINUTES=${RATE_LIMIT_WINDOW_MINUTES}
      - XDG_CACHE_HOME=/opt/cache
    volumes:
      - xenova-cache:/opt/cache
    depends_on:
      qdrant:
        condition: service_healthy
      embeddings:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://api:3000/healthz').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: ${WEB_CONTAINER_NAME}
    ports:
      - "${WEB_PORT}:3000"
    environment:
      - API_URL=http://api:3000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - TENANT=${TENANT}
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://web:3000 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 20s

volumes:
  qdrant_storage:
    name: ${QDRANT_VOLUME_NAME}
  embeddings_cache:
    name: ${PROJECT_PREFIX}_${TENANT}_embeddings_cache
  xenova-cache:
    name: ${PROJECT_PREFIX}_${TENANT}_xenova_cache

networks:
  app_network:
    name: ${NETWORK_NAME}
    driver: bridge