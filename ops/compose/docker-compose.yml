services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ${QDRANT_CONTAINER_NAME:-cw-rag-demo-qdrant}
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_storage:/qdrant/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../../
      dockerfile: apps/api/Dockerfile
    container_name: ${API_CONTAINER_NAME:-cw-rag-demo-api}
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=${QDRANT_COLLECTION:-docs_v1}
      - PORT=3000
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3001}
    depends_on:
      qdrant:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ../../
      dockerfile: apps/web/Dockerfile
    container_name: ${WEB_CONTAINER_NAME:-cw-rag-demo-web}
    ports:
      - "${WEB_PORT:-3001}:3001"
    environment:
      - API_URL=http://api:3000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3000}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  qdrant_storage:
    name: ${QDRANT_VOLUME_NAME:-cw_rag_demo_qdrant_storage}

networks:
  app_network:
    name: ${NETWORK_NAME:-cw-rag-demo-network}
    driver: bridge
